// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tXSeries_h___
#include "tXSeries.h"
#endif

tXSeries::tXSeries(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)
 : CHInCh()
,
   SimultaneousControl()
,
   AI()
,
   AO()
,
   BrdServices()
,
   BusInterface()
,
   Counter0()
,
   Counter1()
,
   Counter2()
,
   Counter3()
,
   DI()
,
   DO()
,
   AIStreamCircuit()
,
   Counter0StreamCircuit()
,
   Counter1StreamCircuit()
,
   Counter2StreamCircuit()
,
   Counter3StreamCircuit()
,
   DIStreamCircuit()
,
   AOStreamCircuit()
,
   DOStreamCircuit()
,
   Triggers()

{
   _addressOffset = 0;
   _addrSpace = addrSpace;

   _initialize(s);
}

void tXSeries::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

}

void tXSeries::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   CHInCh.initialize(_addrSpace, 0x0 + getAddressOffset(s), s);
   SimultaneousControl.initialize(_addrSpace, 0x6000 + getAddressOffset(s), s);
   AI.initialize(_addrSpace, 0x20270 + getAddressOffset(s), s);
   AO.initialize(_addrSpace, 0x20400 + getAddressOffset(s), s);
   BrdServices.initialize(_addrSpace, 0x20000 + getAddressOffset(s), s);
   BusInterface.initialize(_addrSpace, 0x20000 + getAddressOffset(s), s);
   Counter0.initialize(_addrSpace, 0x20300 + getAddressOffset(s), s);
   Counter1.initialize(_addrSpace, 0x20340 + getAddressOffset(s), s);
   Counter2.initialize(_addrSpace, 0x20380 + getAddressOffset(s), s);
   Counter3.initialize(_addrSpace, 0x203C0 + getAddressOffset(s), s);
   DI.initialize(_addrSpace, 0x20530 + getAddressOffset(s), s);
   DO.initialize(_addrSpace, 0x204AC + getAddressOffset(s), s);
   AIStreamCircuit.initialize(_addrSpace, 0x24000 + getAddressOffset(s), s);
   Counter0StreamCircuit.initialize(_addrSpace, 0x26000 + getAddressOffset(s), s);
   Counter1StreamCircuit.initialize(_addrSpace, 0x28000 + getAddressOffset(s), s);
   Counter2StreamCircuit.initialize(_addrSpace, 0x2A000 + getAddressOffset(s), s);
   Counter3StreamCircuit.initialize(_addrSpace, 0x2C000 + getAddressOffset(s), s);
   DIStreamCircuit.initialize(_addrSpace, 0x2E000 + getAddressOffset(s), s);
   AOStreamCircuit.initialize(_addrSpace, 0x30000 + getAddressOffset(s), s);
   DOStreamCircuit.initialize(_addrSpace, 0x32000 + getAddressOffset(s), s);
   Triggers.initialize(_addrSpace, 0x20000 + getAddressOffset(s), s);



   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------

   //----------------------------------------
   // reset registers
   //----------------------------------------
   reset(s);
}

tXSeries::~tXSeries()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

