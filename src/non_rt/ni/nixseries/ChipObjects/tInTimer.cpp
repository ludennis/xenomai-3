// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tInTimer_h___
#include "tInTimer.h"
#endif

tInTimer::tInTimer(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)

{
   _addressOffset = 0;
   _addrSpace = addrSpace;

   _initialize(s);
}

tInTimer::tInTimer()

{
   _addressOffset = 0;

}

void tInTimer::initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* s)
{

   _addrSpace = addrSpace;
   _addressOffset = addressOffset;

   _initialize(s);
}

void tInTimer::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   Status_1_Register.setRegister(u32(0x0), s);
   Mode_1_Register.setRegister(0x1, s);
   Mode_1_Register.markDirty(s);
   Status_2_Register.setRegister(u32(0x0), s);
   Mode_2_Register.setRegister(u32(0x0), s);
   Mode_2_Register.markDirty(s);
   SI_Save_Register.setRegister(u32(0x0), s);
   SC_Save_Register.setRegister(u32(0x0), s);
   SI_Load_A_Register.setRegister(u32(0x0), s);
   SI_Load_A_Register.markDirty(s);
   SI2_Save_Register.setRegister(u32(0x0), s);
   SI_Load_B_Register.setRegister(u32(0x0), s);
   SI_Load_B_Register.markDirty(s);
   DIV_Save_Register.setRegister(u16(0x0), s);
   SC_Load_A_Register.setRegister(u32(0x0), s);
   SC_Load_A_Register.markDirty(s);
   SC_Load_B_Register.setRegister(u32(0x0), s);
   SC_Load_B_Register.markDirty(s);
   SC_PreWaitCntRegister.setRegister(u32(0x0), s);
   SI2_Load_A_Register.setRegister(u32(0x0), s);
   SI2_Load_A_Register.markDirty(s);
   SI2_Load_B_Register.setRegister(u32(0x0), s);
   SI2_Load_B_Register.markDirty(s);
   DIV_Load_A_Register.setRegister(u16(0x0), s);
   DIV_Load_A_Register.markDirty(s);
}

void tInTimer::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;



   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------
   Command_Register.setRegisterMap(this);
   Status_1_Register.setRegisterMap(this);
   Mode_1_Register.setRegisterMap(this);
   Status_2_Register.setRegisterMap(this);
   Mode_2_Register.setRegisterMap(this);
   SI_Save_Register.setRegisterMap(this);
   SC_Save_Register.setRegisterMap(this);
   SI_Load_A_Register.setRegisterMap(this);
   SI2_Save_Register.setRegisterMap(this);
   SI_Load_B_Register.setRegisterMap(this);
   DIV_Save_Register.setRegisterMap(this);
   SC_Load_A_Register.setRegisterMap(this);
   SC_Load_B_Register.setRegisterMap(this);
   SC_PreWaitCntRegister.setRegisterMap(this);
   SI2_Load_A_Register.setRegisterMap(this);
   SI2_Load_B_Register.setRegisterMap(this);
   DIV_Load_A_Register.setRegisterMap(this);
   Interrupt1_Register.setRegisterMap(this);
   Interrupt2_Register.setRegisterMap(this);
   Reset_Register.setRegisterMap(this);

   //----------------------------------------
   // initialize dirty flags
   //----------------------------------------
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }

   //----------------------------------------
   // reset registers
   //----------------------------------------
   reset(s);
}

tInTimer::~tInTimer()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

