// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tDMAController_h___
#include "tDMAController.h"
#endif

tDMAController::tDMAController(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)

{
   _addressOffset = 0;
   _addrSpace = addrSpace;

   _initialize(s);
}

tDMAController::tDMAController()

{
   _addressOffset = 0;

}

void tDMAController::initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* s)
{

   _addrSpace = addrSpace;
   _addressOffset = addressOffset;

   _initialize(s);
}

void tDMAController::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   Channel_Control_Register.setRegister(u32(0x0), s);
   Channel_Control_Register.markDirty(s);
   Channel_Operation_Register.setRegister(u32(0x0), s);
   Channel_Operation_Register.markDirty(s);
}

void tDMAController::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;



   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------
   Channel_Memory_Address_Register_LSW.setRegisterMap(this);
   Channel_Memory_Address_Register_MSW.setRegisterMap(this);
   Channel_Link_Address_Register_LSW.setRegisterMap(this);
   Channel_Link_Address_Register_MSW.setRegisterMap(this);
   Channel_Link_Size_Register.setRegisterMap(this);
   Channel_Control_Register.setRegisterMap(this);
   Channel_Operation_Register.setRegisterMap(this);
   Channel_Status_Register.setRegisterMap(this);
   Channel_Volatile_Status_Register.setRegisterMap(this);
   Channel_Total_Transfer_Count_Compare_Register_LSW.setRegisterMap(this);
   Channel_Total_Transfer_Count_Compare_Register_MSW.setRegisterMap(this);
   Channel_Total_Transfer_Count_Status_Register_LSW.setRegisterMap(this);
   Channel_Total_Transfer_Count_Status_Register_MSW.setRegisterMap(this);
   Channel_Total_Transfer_Count_Latching_Register_LSW.setRegisterMap(this);
   Channel_Total_Transfer_Count_Latching_Register_MSW.setRegisterMap(this);

   //----------------------------------------
   // initialize dirty flags
   //----------------------------------------
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }

   //----------------------------------------
   // reset registers
   //----------------------------------------
   reset(s);
}

tDMAController::~tDMAController()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

