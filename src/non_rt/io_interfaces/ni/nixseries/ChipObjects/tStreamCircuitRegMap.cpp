// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tStreamCircuitRegMap_h___
#include "tStreamCircuitRegMap.h"
#endif

tStreamCircuitRegMap::tStreamCircuitRegMap(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)

{
   _addressOffset = 0;
   _addrSpace = addrSpace;

   _initialize(s);
}

tStreamCircuitRegMap::tStreamCircuitRegMap()

{
   _addressOffset = 0;

}

void tStreamCircuitRegMap::initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* s)
{

   _addrSpace = addrSpace;
   _addressOffset = addressOffset;

   _initialize(s);
}

void tStreamCircuitRegMap::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   StreamFifoSizeReg.setRegister(u32(0x0), s);
   StreamTransferLimitReg.setRegister(u32(0x0), s);
   StreamTransferLimitReg.markDirty(s);
   StreamEvictionReg.setRegister(u32(0x0), s);
   StreamEvictionReg.markDirty(s);
   StreamTransactionLimitReg.setRegister(u32(0x0), s);
   StreamTransactionLimitReg.markDirty(s);
   unsigned int i;
   for(i = 0; i < 1; ++i) {
      DMAChannel[i].setRegister(u32(0x0), s);
      DMAChannel[i].markDirty(s);
   }
}

void tStreamCircuitRegMap::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   {
      unsigned int i;
      for (i=0; i<1; ++i) {
         DMAChannel[i].initialize(0x904 + (0x10 * i), 0x7 + i);
      }
   }


   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------
   StreamControlStatusReg.setRegisterMap(this);
   StreamAdditiveTransferCountReg.setRegisterMap(this);
   StreamTransferCountReg.setRegisterMap(this);
   StreamFifoSizeReg.setRegisterMap(this);
   StreamTransferLimitReg.setRegisterMap(this);
   StreamEvictionReg.setRegisterMap(this);
   StreamTransactionLimitReg.setRegisterMap(this);
   {
      unsigned int i;
      for(i = 0; i < 1; ++i) {
         DMAChannel[i].setRegisterMap(this);
      }
   }

   //----------------------------------------
   // initialize dirty flags
   //----------------------------------------
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }

   //----------------------------------------
   // reset registers
   //----------------------------------------
   reset(s);
}

tStreamCircuitRegMap::~tStreamCircuitRegMap()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

