// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tDI_h___
#include "tDI.h"
#endif

tDI::tDI(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)
 : DI_Timer()

{
   _addressOffset = 0;
   _addrSpace = addrSpace;

   _initialize(s);
}

tDI::tDI()
 : DI_Timer()

{
   _addressOffset = 0;

}

void tDI::initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* s)
{

   _addrSpace = addrSpace;
   _addressOffset = addressOffset;

   _initialize(s);
}

void tDI::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   DI_ChangeDetectStatusRegister.setRegister(u32(0x0), s);
   DI_ChangeIrqRE_Register.setRegister(u32(0x0), s);
   DI_ChangeIrqRE_Register.markDirty(s);
   DI_ChangeDetectLatchedDI_Register.setRegister(u32(0x0), s);
   DI_ChangeIrqFE_Register.setRegister(u32(0x0), s);
   DI_ChangeIrqFE_Register.markDirty(s);
   DI_ChangeDetectLatchedPFI_Register.setRegister(u16(0x0), s);
   PFI_ChangeIrq_Register.setRegister(u32(0x0), s);
   PFI_ChangeIrq_Register.markDirty(s);
   DI_DMA_Select_Register.setRegister(u8(0x0), s);
   DI_DMA_Select_Register.markDirty(s);
   Static_Digital_Input_Register.setRegister(u32(0x0), s);
   DI_FIFO_St_Register.setRegister(u32(0x0), s);
   DI_Mode_Register.setRegister(u32(0x0), s);
   DI_Mode_Register.markDirty(s);
   DI_FIFO_Data_Register.setRegister(u32(0x0), s);
   DI_FIFO_Data_Register16.setRegister(u16(0x0), s);
   DI_FIFO_Data_Register8.setRegister(u8(0x0), s);
   DI_Mask_Enable_Register.setRegister(u32(0x0), s);
   DI_Mask_Enable_Register.markDirty(s);
   DI_Trigger_Select_Register.setRegister(u32(0x0), s);
   DI_Trigger_Select_Register.markDirty(s);
   DI_FilterRegisterLo.setRegister(u32(0x0), s);
   DI_FilterRegisterLo.markDirty(s);
   DI_FilterRegisterHi.setRegister(u32(0x0), s);
   DI_FilterRegisterHi.markDirty(s);
}

void tDI::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   DI_Timer.initialize(_addrSpace, 0x30 + getAddressOffset(s), s);



   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------
   DI_ChangeDetectStatusRegister.setRegisterMap(this);
   DI_ChangeIrqRE_Register.setRegisterMap(this);
   DI_ChangeDetectLatchedDI_Register.setRegisterMap(this);
   DI_ChangeIrqFE_Register.setRegisterMap(this);
   DI_ChangeDetectLatchedPFI_Register.setRegisterMap(this);
   PFI_ChangeIrq_Register.setRegisterMap(this);
   DI_ChangeDetectIRQ_Register.setRegisterMap(this);
   DI_DMA_Select_Register.setRegisterMap(this);
   Static_Digital_Input_Register.setRegisterMap(this);
   DI_FIFO_St_Register.setRegisterMap(this);
   DI_Mode_Register.setRegisterMap(this);
   DI_FIFO_Data_Register.setRegisterMap(this);
   DI_FIFO_Data_Register16.setRegisterMap(this);
   DI_FIFO_Data_Register8.setRegisterMap(this);
   DI_Mask_Enable_Register.setRegisterMap(this);
   DI_Trigger_Select_Register.setRegisterMap(this);
   DI_FilterRegisterLo.setRegisterMap(this);
   DI_FilterRegisterHi.setRegisterMap(this);

   //----------------------------------------
   // initialize dirty flags
   //----------------------------------------
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }

   //----------------------------------------
   // reset registers
   //----------------------------------------
   reset(s);
}

tDI::~tDI()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

