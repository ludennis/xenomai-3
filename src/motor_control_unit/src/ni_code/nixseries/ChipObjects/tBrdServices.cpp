// Copyright 2011 National Instruments
// License: NATIONAL INSTRUMENTS SOFTWARE LICENSE AGREEMENT
//   Refer to "MHDDK License Agreement.pdf" in the root of this distribution.

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef ___tBrdServices_h___
#include "tBrdServices.h"
#endif

tBrdServices::tBrdServices(tBusSpaceReference addrSpace, nMDBG::tStatus2* s)

{
   _addressOffset = 0;
   _addrSpace = addrSpace;

   _initialize(s);
}

tBrdServices::tBrdServices()

{
   _addressOffset = 0;

}

void tBrdServices::initialize(tBusSpaceReference addrSpace, u32 addressOffset, nMDBG::tStatus2* s)
{

   _addrSpace = addrSpace;
   _addressOffset = addressOffset;

   _initialize(s);
}

void tBrdServices::reset(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   ScratchPadRegister.setRegister(u32(0x0), s);
   ScratchPadRegister.markDirty(s);
   Signature_Register.setRegister(u32(0x0), s);
   TimeSincePowerUpRegister.setRegister(u32(0x0), s);
   unsigned int i;
   for(i = 0; i < 7; ++i) {
      GenPwmPageSpec_i[i].setRegister(u8(0x0), s);
      GenPwmPageSpec_i[i].markDirty(s);
   }
   for(i = 0; i < 7; ++i) {
      Gen_PWM_i[i].setRegister(u16(0x0), s);
      Gen_PWM_i[i].markDirty(s);
   }
   SCXI_Serial_Data_In_Register.setRegister(u8(0x0), s);
   SCXI_Control_Register.setRegister(0xa1, s);
   SCXI_Control_Register.markDirty(s);
   SCXI_Output_Enable_Register.setRegister(u8(0x0), s);
   SCXI_Output_Enable_Register.markDirty(s);
   SCXI_Status_Register.setRegister(u8(0x0), s);
   SCXI_Mux_Clock_Register.setRegister(u8(0x0), s);
   SCXI_Mux_Clock_Register.markDirty(s);
   WatchdogStatusRegister.setRegister(u32(0x0), s);
   WatchdogTimeoutRegister.setRegister(u32(0x0), s);
   WatchdogTimeoutRegister.markDirty(s);
   WatchdogConfiguration.setRegister(u16(0x0), s);
   WatchdogConfiguration.markDirty(s);
}

void tBrdServices::_initialize(nMDBG::tStatus2* s)
{
   if (s && s->isFatal()) return;

   {
      unsigned int i;
      for (i=0; i<7; ++i) {
         GenPwmPageSpec_i[i].initialize(0x18 + (0x1 * i), 0x6 + i);
      }
      for (i=0; i<7; ++i) {
         Gen_PWM_i[i].initialize(0x24 + (0x2 * i), 0xd + i);
      }
   }


   //----------------------------------------
   // set register maps of all registers
   //----------------------------------------
   Gen_Interrupt1_Register.setRegisterMap(this);
   Gen_Interrupt2_Register.setRegisterMap(this);
   ScratchPadRegister.setRegisterMap(this);
   Signature_Register.setRegisterMap(this);
   Joint_Reset_Register.setRegisterMap(this);
   TimeSincePowerUpRegister.setRegisterMap(this);
   {
      unsigned int i;
      for(i = 0; i < 7; ++i) {
         GenPwmPageSpec_i[i].setRegisterMap(this);
      }
   }
   {
      unsigned int i;
      for(i = 0; i < 7; ++i) {
         Gen_PWM_i[i].setRegisterMap(this);
      }
   }
   SCXI_Serial_Data_In_Register.setRegisterMap(this);
   SCXI_Serial_Data_Out_Register.setRegisterMap(this);
   SCXI_Control_Register.setRegisterMap(this);
   SCXI_Output_Enable_Register.setRegisterMap(this);
   SCXI_Status_Register.setRegisterMap(this);
   SCXI_Mux_Clock_Register.setRegisterMap(this);
   WatchdogStatusRegister.setRegisterMap(this);
   WatchdogTimeoutRegister.setRegisterMap(this);
   WatchdogConfiguration.setRegisterMap(this);
   WatchdogControl.setRegisterMap(this);

   //----------------------------------------
   // initialize dirty flags
   //----------------------------------------
   for (unsigned int i = 0; i < sizeof(_dirtyVector)/sizeof(_dirtyVector[0]); i++) {
      _dirtyVector[i] = 0;
   }

   //----------------------------------------
   // reset registers
   //----------------------------------------
   reset(s);
}

tBrdServices::~tBrdServices()
{
}



// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is autogenerated!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!

