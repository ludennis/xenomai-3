/*
 *                         Vortex OpenSplice
 *
 *   This software and documentation are Copyright 2006 to 2019 ADLINK
 *   Technology Limited, its affiliated companies and licensors. All rights
 *   reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

/************************************************************************
 * LOGICAL_NAME:    ddstypes.idl
 * FUNCTION:        NodeJS unit test code
 ************************************************************************
 *
 * This file contains the data definitions for the unit tests.
 *
 ***/

module TypeTest {

    //enum
    enum Color {
        RED,
        GREEN,
        BLUE
        };

    // Primitive Types

    struct TypeTestlong {
        long long key;          
        char cBefore;          
        long testData;          // long
        char cAfter;        
    };
    #pragma keylist TypeTestlong key

    struct TypeTestlonglong {
        long long key;          
        char cBefore;          
        long long testData;     //longlong
        char cAfter;        
    };
    #pragma keylist TypeTestlonglong key

    struct TypeTestfloat {
        long long key;          
        char cBefore;          
        float testData;         //float
        char cAfter;        
    };
    #pragma keylist TypeTestfloat key

    struct TypeTestshort {
        long long key;          
        char cBefore;          
        short testData;         //short
        char cAfter;        
    };
    #pragma keylist TypeTestshort key

    struct TypeTestchar {
        long long key;          
        char cBefore;          
        char testData;          //char 
        char cAfter;        
    };
    #pragma keylist TypeTestchar key

    struct TypeTestoctet {
        long long key;          
        char cBefore;          
        octet testData;          //octet 
        char cAfter;        
    };
    #pragma keylist TypeTestoctet key

    struct TypeTestdouble {
        long long key;          
        char cBefore;          
        double testData;          //double 
        char cAfter;        
    };
    #pragma keylist TypeTestdouble key

    struct TypeTeststring {
        long long key;          
        char cBefore;          
        string testData;          //string 
        char cAfter;        
    };
    #pragma keylist TypeTeststring key

    struct TypeTestbool {
        long long key;          
        char cBefore;          
        boolean testData;          //boolean
        char cAfter;        
    };
    #pragma keylist TypeTestbool key

    struct TypeTestulong {
        long long key;          
        char cBefore;          
        unsigned long testData;         //unsigned long
        char cAfter;        
    };
    #pragma keylist TypeTestulong key

    struct TypeTestulonglong {
        long long key;          
        char cBefore;          
        unsigned long long testData;    //unsigned longlong
        char cAfter;        
    };
    #pragma keylist TypeTestulonglong key

    struct TypeTestushort {
        long long key;          
        char cBefore;          
        unsigned short testData;        //unsigned short
        char cAfter;        
    };
    #pragma keylist TypeTestushort key

    struct TypeTestenum {
        long long key;          
        char cBefore;          
        Color testData;                     //enum
        char cAfter;        
    };
    #pragma keylist TypeTestenum key

    struct TypeTestarray {
        long long key;          
        char cBefore;          
        long testData[3];                   //array of long
        char cAfter;        
    };
    #pragma keylist TypeTestarray key

    struct TypeTestseq {
        long long key;          
        char cBefore;          
        sequence<long> testData;            //sequence of long
        char cAfter;        
    };
    #pragma keylist TypeTestseq key

    struct TypeTestboundedseq {
        long long key;
        char cBefore;
        sequence<long, 3> testData;            //bounded sequence of long
        char cAfter;
    };
    #pragma keylist TypeTestboundedseq key

    struct TypeTestseqarray {
        long long key;
        char cBefore;
        sequence<long> testData[3];            //Array of sequence of long
        char cAfter;
    };
    #pragma keylist TypeTestseqarray key

    struct NestTestStruct {         
        char cBefore;          
        long testData;                  
        char cAfter;        
    };

    struct TypeTestnestedstruct {
        long long key;          
        char cBefore;          
        NestTestStruct testData;            //nested struct
        char cAfter;        
    };
    #pragma keylist TypeTestnestedstruct key

    struct Typearrayofnestedstruct {
        long long key;          
        char cBefore;          
        NestTestStruct testData[2];        //array of nested structs
        char cAfter;        
    };
    #pragma keylist Typearrayofnestedstruct key

    struct TypeTestMultiArrayStruct{
		long long key;          
        char cBefore;
		long testData[2][3];
        char cAfter; 
	};
	#pragma keylist TypeTestMultiArrayStruct key

};