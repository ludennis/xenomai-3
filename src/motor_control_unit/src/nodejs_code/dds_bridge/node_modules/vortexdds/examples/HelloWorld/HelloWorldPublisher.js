/*
 *                         Vortex OpenSplice
 *
 *   This software and documentation are Copyright 2006 to 2019 ADLINK
 *   Technology Limited, its affiliated companies and licensors. All rights
 *   reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

/*
    Hello World example.
    Instructions: 1. Run nodejs HelloWorldSubscriber.js
                  2. Run nodejs HelloWorldPublisher.js
*/

'use strict';

const dds = require('vortexdds');
const path = require('path');

main();

function main(){
  publishData().then(() => {
    console.log('=== HelloWorldPublisher end');
    process.exit(0);
  }).catch((error) => {
    console.log('Error: ' + error.message);
    process.exit(1);
  });
}

async function publishData(){

  console.log('=== HelloWorldPublisher start');

  let participant = null;
  try {
    participant = new dds.Participant();

    const topicName = 'HelloWorldData_Msg';
    const idlName = 'HelloWorldData.idl';
    const idlPath = __dirname + path.sep + idlName;

    const typeSupports = await dds.importIDL(idlPath);
    const typeSupport = typeSupports.get('HelloWorldData::Msg');

    const tqos = dds.QoS.topicDefault();

    tqos.durability = {kind: dds.DurabilityKind.Transient};
    tqos.reliability = {kind: dds.ReliabilityKind.Reliable};

    const topic = participant.createTopic(
      topicName,
      typeSupport,
      tqos
    );

    const pqos = dds.QoS.publisherDefault();

    pqos.partition = {names: 'HelloWorld example'};
    const pub = participant.createPublisher(pqos);

    const wqos = dds.QoS.writerDefault();

    wqos.durability = {kind: dds.DurabilityKind.Transient};
    wqos.reliability = {kind: dds.ReliabilityKind.Reliable};
    const writer = pub.createWriter(topic, wqos);

    // send one message
    const msg = {userID: 1, message: 'Hello World'};

    console.log('=== [Publisher] writing a message containing :');
    console.log('    userID  : ' + msg.userID);
    console.log('    Message : ' + msg.message);

    await writer.writeReliable(msg);

  } finally {
    console.log('=== Cleanup resources');
    if (participant !== null){
      participant.delete().catch((error) => {
        console.log('Error cleaning up resources: '
          + error.message);
      });
    }
  }

};


