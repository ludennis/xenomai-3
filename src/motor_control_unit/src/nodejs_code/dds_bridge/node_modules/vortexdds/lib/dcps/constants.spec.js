/*
 *                         Vortex OpenSplice
 *
 *   This software and documentation are Copyright 2006 to 2019 ADLINK
 *   Technology Limited, its affiliated companies and licensors. All rights
 *   reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

/* eslint-env node, mocha */

/**
 * Re: Object.freeze
 * When we call Object.freeze, we set the writable attribute on each
 * property to false. See
 * (https://www.ecma-international.org/ecma-262/6.0/, ยง19.1.2.5).
 */

/**
  * Re: Assignment
 * "... The LeftHandSide also may not be a reference to a data property with the
 * attribute value {[[Writable]]:false}, ... .
 * In these cases a TypeError exception is thrown (12.14)."
 * (https://www.ecma-international.org/ecma-262/6.0/, Annex C).
 */

/**
  * Summary:
  * In strict mode, changing a property of a frozen object
  * results in a TypeError.
  *
  * In non-strict mode, the behaviour does not appear to be
  * specified.
  */

// eslint-disable-next-line strict
const dds = require('./index');
const expect = require('chai').expect;

describe('Testing imports in strict mode', function() {
  // eslint-disable-next-line strict
  'use strict';

  describe('Reassinging dcps imports throws TypeError', function() {
    it('Reassigning dds.StateMask results in TypeError', function() {
      expect(function() {
        dds.StateMask = 'foo';
      }).to.throw(TypeError);
    });

    it('Reassigning dds.SampleRejectedStatusKind results in TypeError',
      function() {
        expect(function() {
          dds.SampleRejectedStatusKind = 'foo';
        }).to.throw(TypeError);
      });

    it('Reassigning dds.StatusMask results in TypeError', function() {
      expect(function() {
        dds.StatusMask = 'foo';
      }).to.throw(TypeError);
    });

    it('Reassigning dds.DDSConstants results in TypeError', function() {
      expect(function() {
        dds.DDSConstants = 'foo';
      }).to.throw(TypeError);
    });
  });

  describe('Changing properties of dcps imports throws TypeError', function() {
    it('Changing dds.StateMask.sample results in TypeError', function() {
      expect(function() {
        dds.StateMask.sample = 'foo';
      }).to.throw(TypeError);
    });

    it('Changing dds.StateMask.sample.read results in TypeError', function() {
      expect(function() {
        dds.StateMask.sample.read = 'foo';
      }).to.throw(TypeError);
    });

    it('Changing dds.SampleRejectedStatusKind.NOT_REJECTED results in ' +
      'TypeError', function() {
      expect(function() {
        dds.SampleRejectedStatusKind.NOT_REJECTED = 'foo';
      }).to.throw(TypeError);
    });

    it('Changing dds.StatusMask.data_available results in TypeError',
      function() {
        expect(function() {
          dds.StatusMask.data_available = 'foo';
        }).to.throw(TypeError);
      });

    it('Changing dds.DDSConstants.DDS_LENGTH_UNLIMITED results in TypeError',
      function() {
        expect(function() {
          dds.DDSConstants.DDS_LENGTH_UNLIMITED = 'foo';
        }).to.throw(TypeError);
      });
  });

  describe('Reassign qos imports results in TypeError', function() {
    it('Reassigning qos.DurabilityKind results in TypeError', function() {
      expect(function() {
        dds.DurabilityKind = 'foo';
      }).to.throw(TypeError);
    });

    it('Reassigning dds.HistoryKind results in TypeError', function() {
      expect(function() {
        dds.HistoryKind = 'foo';
      }).to.throw(TypeError);
    });

    it('Reassigning dds.OwnershipKind results in TypeError', function() {
      expect(function() {
        dds.OwnershipKind = 'foo';
      }).to.throw(TypeError);
    });

    it('Reassigning dds.LivelinessKind results in TypeError', function() {
      expect(function() {
        dds.LivelinessKind = 'foo';
      }).to.throw(TypeError);
    });

    it('Reassigning dds.ReliabilityKind results in TypeError', function() {
      expect(function() {
        dds.ReliabilityKind = 'foo';
      }).to.throw(TypeError);
    });

    it('Reassigning dds.DestinationOrderKind results in TypeError', function() {
      expect(function() {
        dds.DestinationOrderKind = 'foo';
      }).to.throw(TypeError);
    });

    it('Reassigning dds.PresentationAccessScopeKind results in TypeError',
      function() {
        expect(function() {
          dds.PresentationAccessScopeKind.Instance = 'foo';
        }).to.throw(TypeError);
      });
  });

  describe('Changing properties of qos imports results in TypeError',
    function() {
      it('Changing dds.DurabilityKind.Volatile results in TypeError',
        function() {
          expect(function() {
            dds.DurabilityKind.Volatile = 'foo';
          }).to.throw(TypeError);
        });

      it('Changing dds.HistoryKind.KeepLast results in TypeError', function() {
        expect(function() {
          dds.HistoryKind.KeepLast = 'foo';
        }).to.throw(TypeError);
      });

      it('Changing dds.OwnershipKind.Shared results in TypeError', function() {
        expect(function() {
          dds.OwnershipKind.Shared = 'foo';
        }).to.throw(TypeError);
      });

      it('Changing dds.LivelinessKind.Automatic results in TypeError',
        function() {
          expect(function() {
            dds.LivelinessKind.Automatic = 'foo';
          }).to.throw(TypeError);
        });

      it('Changing dds.ReliabilityKind.BestEffort results in TypeError',
        function() {
          expect(function() {
            dds.ReliabilityKind.BestEffort = 'foo';
          }).to.throw(TypeError);
        });

      it('Changing dds.DestinationOrderKind.ByReceptionTimestamp results in ' +
        'TypeError', function() {
        expect(function() {
          dds.DestinationOrderKind.ByReceptionTimestamp = 'foo';
        }).to.throw(TypeError);
      });

      it('Changing dds.PresentationAccessScopeKind.Instance results in '
        + 'TypeError',
      function() {
        expect(function() {
          dds.PresentationAccessScopeKind.Instance = 'foo';
        }).to.throw(TypeError);
      });
    });
});

describe('Testing imports in non-strict mode', function() {
  let StateMaskCopy = null;
  let SampleRejectedStatusKindCopy = null;
  let StatusMaskCopy = null;
  let DDSConstantsCopy = null;
  let DurabilityKindCopy = null;
  let HistoryKindCopy = null;
  let OwnershipKindCopy = null;
  let LivelinessKindCopy = null;
  let ReliabilityKindCopy = null;
  let DestinationOrderKindCopy = null;
  let PresentationAccessScopeKindCopy = null;

  before(function() {
    StateMaskCopy = dds.StateMask;
    SampleRejectedStatusKindCopy = dds.SampleRejectedStatusKind;
    StatusMaskCopy = dds.StatusMask;
    DDSConstantsCopy = dds.DDSConstants;
    DurabilityKindCopy = dds.DurabilityKind;
    HistoryKindCopy = dds.HistoryKind;
    OwnershipKindCopy = dds.OwnershipKind;
    LivelinessKindCopy = dds.LivelinessKind;
    ReliabilityKindCopy = dds.ReliabilityKind;
    DestinationOrderKindCopy = dds.DestinationOrderKind;
    PresentationAccessScopeKindCopy = dds.PresentationAccessScopeKind;
  });

  describe('Reassinging dcps imports fails silently', function() {
    it('Reassigning dds.StateMask fails silently', function() {
      dds.StateMask = 'foo';
      expect(dds.StateMask).to.deep.equal(StateMaskCopy);
    });

    it('Reassigning dds.SampleRejectedStatusKind fails silently',
      function() {
        dds.SampleRejectedStatusKind = 'foo';
        expect(dds.SampleRejectedStatusKind).to.deep
          .equal(SampleRejectedStatusKindCopy);
      });

    it('Reassigning dds.StatusMask fails silently', function() {
      dds.StatusMask = 'foo';
      expect(dds.StatusMask).to.deep
        .equal(StatusMaskCopy);
    });

    it('Reassigning dds.DDSConstants results in TypeError', function() {
      dds.DDSConstants = 'foo';
      expect(dds.DDSConstants).to.deep
        .equal(DDSConstantsCopy);
    });
  });

  describe('Changing properties of dcps imports fails silently', function() {
    it('Changing dds.StateMask.sample fails silently', function() {
      dds.StateMask.sample = 'foo';
      expect(dds.StateMask).to.deep.equal(StateMaskCopy);
    });

    it('Changing dds.StateMask.sample.read fails silently', function() {
      dds.StateMask.sample.read = 'foo';
      expect(dds.StateMask).to.deep.equal(StateMaskCopy);
    });

    it('Changing dds.SampleRejectedStatusKind.NOT_REJECTED fails silently',
      function() {
        dds.SampleRejectedStatusKind.NOT_REJECTED = 'foo';
        expect(dds.SampleRejectedStatusKind).to.deep
          .equal(SampleRejectedStatusKindCopy);
      });

    it('Changing dds.StatusMask.data_available fails silently',
      function() {
        dds.StatusMask.data_available = 'foo';
        expect(dds.StatusMask).to.deep.equal(StatusMaskCopy);
      });

    it('Changing dds.DDSConstants.DDS_LENGTH_UNLIMITED fails silently',
      function() {
        dds.DDSConstants.DDS_LENGTH_UNLIMITED = 'foo';
        expect(dds.DDSConstants).to.deep.equal(DDSConstantsCopy);
      });
  });

  describe('Reassign qos imports fails silently', function() {
    it('Reasssigning qos.DurabilityKind fails silently', function() {
      dds.DurabilityKind = 'foo';
      expect(dds.DurabilityKind).to.deep.equal(DurabilityKindCopy);
    });

    it('Reassigning dds.HistoryKind fails silently', function() {
      dds.HistoryKind = 'foo';
      expect(dds.HistoryKind).to.deep.equal(HistoryKindCopy);
    });

    it('Reassigning dds.OwnershipKind fails silently', function() {
      dds.OwnershipKind = 'foo';
      expect(dds.OwnershipKind).to.deep.equal(OwnershipKindCopy);
    });

    it('Reassigning dds.LivelinessKind fails silently', function() {
      dds.LivelinessKind = 'foo';
      expect(dds.LivelinessKind).to.deep.equal(LivelinessKindCopy);
    });

    it('Reasssigning dds.ReliabilityKind fails silently', function() {
      dds.ReliabilityKind = 'foo';
      expect(dds.ReliabilityKind).to.deep.equal(ReliabilityKindCopy);
    });

    it('Reasssigning dds.DestinationOrderKind fails silently', function() {
      dds.DestinationOrderKind = 'foo';
      expect(dds.DestinationOrderKind).to.deep.equal(DestinationOrderKindCopy);
    });

    it('Reassigning dds.PresentationAccessScopeKind fails silently',
      function() {
        dds.PresentationAccessScopeKind = 'foo';
        expect(dds.PresentationAccessScopeKind).to.deep
          .equal(PresentationAccessScopeKindCopy);
      });
  });

  describe('Changing properties of qos imports fails silently', function() {
    it('Changing dds.DurabilityKind.Volatile fails silently', function() {
      dds.DurabilityKind.Volatile = 'foo';
      expect(dds.DurabilityKind).to.deep.equal(DurabilityKindCopy);
    });

    it('Changing dds.HistoryKind.KeepLast fails silently', function() {
      dds.HistoryKind.KeepLast = 'foo';
      expect(dds.HistoryKind).to.deep.equal(HistoryKindCopy);
    });

    it('Changing dds.OwnershipKind.Shared fails silently', function() {
      dds.OwnershipKind.Shared = 'foo';
      expect(dds.OwnershipKind).to.deep.equal(OwnershipKindCopy);
    });

    it('Changing dds.LivelinessKind.Automatic fails silently',
      function() {
        dds.LivelinessKind.Automatic = 'foo';
        expect(dds.LivelinessKind).to.deep.equal(LivelinessKindCopy);
      });

    it('Changing dds.ReliabilityKind.BestEffort fails silently',
      function() {
        dds.ReliabilityKind.BestEffort = 'foo';
        expect(dds.ReliabilityKind).to.deep.equal(ReliabilityKindCopy);
      });

    it('Changing dds.DestinationOrderKind.ByReceptionTimestamp fails silently',
      function() {
        dds.DestinationOrderKind.ByReceptionTimestamp = 'foo';
        expect(dds.DestinationOrderKind).to.deep
          .equal(DestinationOrderKindCopy);
      });

    it('Changing dds.PresentationAccessScopeKind.Instance fails silently',
      function() {
        dds.PresentationAccessScopeKind.Instance = 'foo';
        expect(dds.PresentationAccessScopeKind).to.deep
          .equal(PresentationAccessScopeKindCopy);
      });
  });
});
