/*
 *                         Vortex OpenSplice
 *
 *   This software and documentation are Copyright 2006 to 2019 ADLINK
 *   Technology Limited, its affiliated companies and licensors. All rights
 *   reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

'use strict';


/**
  * TypeError string constant messages
  * Used in dcps.js for argument checking
  * @ignore
  */
const typeCheckMsgs = {
  INVALID_ARG_MSG: 'Invalid argument: ',
  ENTITY_ERR_MSG: 'Invalid argument: entity must be an Entity object',
  PARTICIPANT_ERR_MSG:
  'Invalid argument: participant must be a Participant object',
  TOPIC_ERR_MSG: 'Invalid argument: topic must be a Topic object',
  READER_ERR_MSG: 'Invalid argument: reader must be a Reader object',
  DP_OR_SUB_ERR_MSG:
  'Invalid argument: dpOrSub must be a Participant or Subscriber object',
  DP_OR_PUB_ERR_MSG:
  'Invalid argument: dpOrPub must be a Participant or Publisher object',
  QOS_ERR_MSG: 'Invalid argument: qos must be a QoS object if not null',
  COND_ERR_MSG: 'Invalid argument: cond must be a Condition object',
  TYPE_SUPPORT_ERR_MSG:
  'Invalid argument: typeSupport must be a TypeSupport object',
  MASK_ERR_MSG: 'Invalid argument: mask must be a number',
  MASK_ERR_MSG_IFNOT_NULL:
  'Invalid argument: mask must be a number if not null',
  MAX_SAMPLE_ERR_MSG: 'Invalid argument: maxSample must be a number',
  DATA_ERR_MSG: 'Invalid argument: data must not be null or undefined',
  PARAMS_ERR_MSG: 'Invalid argument: params must be an array of strings',
  STR_OR_ARR_OF_STR_MSG:
  'Invalid argument: names must be a string or an array of strings',
  STR_OR_BUF_MSG:
  'Invalid argument: value must be a string or a Buffer object if not null',
  ID_STR_ERR_MSG: 'Invalid argument: id must be a string if not null',
  KIND_ERR_MSG: 'Invalid argument: kind must be a number',
  NUM_ERR_MSG: 'must be a number',
  STR_ERR_MSG: 'must be a string',
  BOOL_ERR_MSG: 'must be a boolean',
  FUNCTION_ERR_MSG: 'must be a function',
  IFNOT_NULL_MSG: ' if not null',
  DUR_ERR_MSG: 'Invalid argument: duration or timestamp must be a number '
  + 'or string representing a number',
};

/**
 * All functions return >= 0 on success
 * @name DDSErrorStrings
 * @param {number} 0 - Success
 * @param {number} 1 - Non specific error
 * @param {number} 2 - Feature unsupported
 * @param {number} 3 - Bad parameter value
 * @param {number} 4 - Precondition for operation not met
 * @param {number} 5 - When an operation fails because of a lack of resources
 * @param {number} 6 - When a configurable feature is not enabled
 * @param {number} 7 - When an attempt is made to modify an immutable policy
 * @param {number} 8 - When a policy is used with inconsistent values
 * @param {number} 9 - When an attempt is made to delete something
 * more than once
 * @param {number} 10 - When a timeout has occured
 * @param {number} 11 - When expected data is not provided
 * @param {number} 12 - When a funtion is called when it should not be
 * @ignore
 */
const errorStrings = {
  0: 'Ok',
  1: 'Error',
  2: 'Unsupported',
  3: 'Bad parameter',
  4: 'Preconditions not met',
  5: 'Out of resources',
  6: 'Not enabled',
  7: 'Immutable policy',
  8: 'Inconsistent policy',
  9: 'Already deleted',
  10: 'Timeout',
  11: 'No data',
  12: 'Illegal operation',
};

/**
 * An enumeration of error codes understood
 * by {@link module:vortexdds.DDSError|DDSError}
 * @readonly
 * @enum {number}
 * @alias module:vortexdds.DDSErrorCode
 */
const DDSErrorCode = {
  /** Success */
  OK: 0,
  /** Non specific error */
  ERROR: 1,
  /** Feature unsupported */
  UNSUPPORTED: 2,
  /** Bad parameter value */
  BAD_PARAMETER: 3,
  /** Preconditon for operation not met */
  PRECONDITION_NOT_MET: 4,
  /** Operation failed because of a lack of resources */
  OUT_OF_RESOURCES: 5,
  /** A configurable feature is not enabled */
  NOT_ENABLED: 6,
  /** Attempt was made to modify an immutable policy */
  IMMUTABLE_POLICY: 7,
  /** A policy was used with inconsistent values */
  INCONSISTENT_POLICY: 8,
  /** An attempt was made to delete something more than once */
  ALREADY_DELETED: 9,
  /** A timeout has occurred */
  TIMEOUT: 10,
  /** Expected data was not provided */
  NO_DATA: 11,
  /** A function was called when it should not have been */
  ILLEGAL_OPERATION: 12,
};

/**
 * The built-in Error class
 * @external Error
 * @see https://nodejs.org/api/errors.html#errors_class_error
 *
 * @alias external:Error
 */

/**
 * An error originating from the DDS system.
 *
 * Every DDS error has two properties:
 * - {@link module:vortexdds.DDSError#ddsErrCode|ddsErrCode}
 * a numeric value between 0 and 12
 * - {@link module:vortexdds.DDSError#ddsErrMsg|ddsErrMsg}
 * a short textual description of the error code
 *
 * Note that every DDSError results in entries in the ospl-error.log
 * file.
 * These entries provide significantly more information on the
 * nature of the error.
 *
 * @alias module:vortexdds.DDSError
 * @extends external:Error
 */
class DDSError extends Error {

  /**
   * Not typically used by customers. Creates a DDSError instance.
   * @param {module:vortexdds.DDSErrorCode} error an integer between 0
   * and 12 or a negative integer returned from one of the C99
   * APIs (used internally)
   * @param {string} [message=''] a message providing context of the error
   */
  constructor(error, message = ''){
    let errorCode = error;
    if (error < 0){
      /** DDS_ERR_NO_MASK = 0x000000ff */
      errorCode = -error & 0x000000ff;
    }

    let ddsErrorMsg = errorStrings[errorCode];
    if (ddsErrorMsg === undefined){
      ddsErrorMsg = 'Unknown DDS error code';
    }

    super(message + ddsErrorMsg);
    this.code = errorCode;
    this.ddsMsg = ddsErrorMsg;
  }

  /**
   * The DDS error code
   * @type {module:vortexdds.DDSErrorCode}
   */
  get ddsErrCode(){
    return this.code;
  }

  /**
   * A short textual description of the DDS error code
   * @type {string}
   */
  get ddsErrMsg(){
    return this.ddsMsg;
  }
}

module.exports.DDSError = DDSError;
module.exports.DDSErrorCode = Object.freeze(DDSErrorCode);
module.exports.typeCheckMsgs = typeCheckMsgs;
