/*
 *                         Vortex OpenSplice
 *
 *   This software and documentation are Copyright 2006 to 2019 ADLINK
 *   Technology Limited, its affiliated companies and licensors. All rights
 *   reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

'use strict';
/* eslint-env node, mocha */
const ddserr = require('./ddserr');
const expect = require('chai').expect;

describe('DDS Error Class tests', function() {
  it('error code matches error message', function() {
    let error;
    error = new ddserr.DDSError(0, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Ok');

    error = new ddserr.DDSError(1, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Error');

    error = new ddserr.DDSError(2, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Unsupported');

    error = new ddserr.DDSError(3, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Bad parameter');

    error = new ddserr.DDSError(4, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Preconditions not met');

    error = new ddserr.DDSError(5, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Out of resources');

    error = new ddserr.DDSError(6, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Not enabled');

    error = new ddserr.DDSError(7, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Immutable policy');

    error = new ddserr.DDSError(8, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Inconsistent policy');

    error = new ddserr.DDSError(9, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Already deleted');

    error = new ddserr.DDSError(10, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Timeout');

    error = new ddserr.DDSError(11, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('No data');

    error = new ddserr.DDSError(12, 'yyy: ');
    expect(error.ddsErrMsg).to.be.equal('Illegal operation');

  });

  it('invalid error code', function(){
    let error;
    error = new ddserr.DDSError(45, 'XXX: ');
    expect(error.ddsErrMsg).to.be.equal('Unknown DDS error code');
  });

  it('negative error code (-513)', function(){
    let error = new ddserr.DDSError(-513);
    expect(error.ddsErrCode).to.be.equal(1);
    expect(error.ddsErrMsg).to.be.equal('Error');
  });

  it('positive error code', function(){
    let error = new ddserr.DDSError(2);
    expect(error.ddsErrCode).to.be.equal(2);
  });
});
