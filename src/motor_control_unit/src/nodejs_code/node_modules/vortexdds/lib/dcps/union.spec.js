/*
 *                         Vortex OpenSplice
 *
 *   This software and documentation are Copyright 2006 to 2019 ADLINK
 *   Technology Limited, its affiliated companies and licensors. All rights
 *   reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

'use strict';
/* eslint-env node, mocha */

const ddstopic = require('./ddstopic');
const expect = require('chai').expect;
const dcps = require('./dcps');
const path = require('path');

describe('Type Support: Union Support', function() {
  var dp = null;
  before(function(){
    dp = new dcps.Participant();
  });

  after(function(){
    dp.delete();
  });

  it('IDLPP import Union.idl', function(done) {

    const idlName = 'test_data' + path.sep + 'Union.idl';
    const idl = path.resolve(idlName);

    ddstopic.importIDL(idl).then((result) => {

      expect(result.size).to.be.equal(7);

      let typeSupport;
      let topic;

      typeSupport = result.get('basic::module_Union::Union_struct1');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US1', typeSupport);
      expect(topic).to.not.be.null;

      typeSupport = result.get('basic::module_Union::Union_struct2');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US2', typeSupport);
      expect(topic).to.not.be.null;

      typeSupport = result.get('basic::module_Union::Union_struct3');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US3', typeSupport);
      expect(topic).to.not.be.null;

      typeSupport = result.get('basic::module_Union::Union_struct4');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US4', typeSupport);
      expect(topic).to.not.be.null;

      typeSupport = result.get('basic::module_Union::Union_struct5');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US5', typeSupport);
      expect(topic).to.not.be.null;

      typeSupport = result.get('basic::module_Union::Union_struct6');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US6', typeSupport);
      expect(topic).to.not.be.null;

      done();
    }).catch((result) => {
      done(new Error('Union test failed'));
    });

  });


});

describe('Type Support: Union Support read/write', function() {
  var dp = null;
  before(function(){
    dp = new dcps.Participant();
  });

  after(function(){
    dp.delete();
  });

  function readWriteSampleTest(topic, sampleJSObj){

    expect(topic).to.not.be.null;

    let reader = dp.createReader(topic, null);
    expect(reader).to.not.be.null;
    let writer = dp.createWriter(topic, null);
    expect(writer).to.not.be.null;

    // write out 1 sample
    let status = writer.write(sampleJSObj);
    expect(status).to.be.equal(0);

    // read 1 sample
    let numSamples = 1;
    let readArray = reader.read(numSamples);
    expect(readArray).to.not.be.null;
    expect(readArray.length).equals(numSamples);

    // verify that the data read is equivalent to
    // data sample written out
    let sampleItem = readArray[0];
    let sample = sampleItem.sample;

    expect(sample).deep.equal(sampleJSObj);

  }

  function get_Union_struct3(topic){

    let Uthree = topic.typeSupport.getClass('basic::module_Union::uthree');

    let jsData = {
      long1: 16,
      union3: new Uthree({sa: 33}),
    };

    return jsData;
  }

  function get_Union_struct4(topic){

    let Ufour = topic.typeSupport.getClass('basic::module_Union::ufour');

    let jsData = {
      long1: 87,
      union4: new Ufour({s2: 4}),
    };

    return jsData;
  }

  function get_Union_struct5(topic){

    let UFive = topic.typeSupport.getClass('basic::module_Union::ufive');

    let jsData = {
      long1: 43,
      union5: new UFive({sF: 888}),
    };

    return jsData;
  }

  function get_Union_struct6(topic){

    let USix = topic.typeSupport.getClass('basic::module_Union::usix');

    let longArray = [[16, 5, 12], [7, 8, 14]]; // 2x3

    let jsData = {
      long1: 43,
      union6: new USix({x1: longArray}),
    };

    return jsData;
  }

  it('IDLPP import Union.idl read write', function(done) {

    const idlName = 'test_data' + path.sep + 'Union.idl';
    const idl = path.resolve(idlName);

    ddstopic.importIDL(idl).then((result) => {

      expect(result.size).to.be.equal(7);

      let typeSupport;
      let topic;
      let sampleJSObj;

      // array
      typeSupport = result.get('basic::module_Union::Union_struct6');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US6', typeSupport);
      expect(topic).to.not.be.null;
      sampleJSObj = get_Union_struct6(topic);
      readWriteSampleTest(topic, sampleJSObj);

      // switch boolean
      typeSupport = result.get('basic::module_Union::Union_struct5');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US5', typeSupport);
      expect(topic).to.not.be.null;
      sampleJSObj = get_Union_struct5(topic);
      readWriteSampleTest(topic, sampleJSObj);

      // switch char
      typeSupport = result.get('basic::module_Union::Union_struct3');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US3', typeSupport);
      expect(topic).to.not.be.null;
      sampleJSObj = get_Union_struct3(topic);
      readWriteSampleTest(topic, sampleJSObj);

      // switch long
      typeSupport = result.get('basic::module_Union::Union_struct4');
      expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
      topic = dp.createTopic('US4', typeSupport);
      expect(topic).to.not.be.null;
      sampleJSObj = get_Union_struct4(topic);
      readWriteSampleTest(topic, sampleJSObj);

      done();
    }).catch((result) => {
      done(new Error('Union test failed'));
    });

  });
});

describe('Union Support: advanced features read/write ',
  function() {
    var dp = null;
    before(function(){
      dp = new dcps.Participant();
    });

    after(function(){
      dp.delete();
    });

    function readWriteSampleTest(topic, sampleJSObj){

      expect(topic).to.not.be.null;

      let reader = dp.createReader(topic, null);
      expect(reader).to.not.be.null;
      let writer = dp.createWriter(topic, null);
      expect(writer).to.not.be.null;

      // write out 1 sample
      let status = writer.write(sampleJSObj);
      expect(status).to.be.equal(0);

      // read 1 sample
      let numSamples = 1;
      let readArray = reader.read(numSamples);
      expect(readArray).to.not.be.null;
      expect(readArray.length).equals(numSamples);

      // verify that the data read is equivalent to
      // data sample written out
      let sampleItem = readArray[0];
      let sample = sampleItem.sample;

      expect(sample).deep.equal(sampleJSObj);

    }

    function get_Union_struct2(topic){

      let UTwo = topic.typeSupport.getClass('basic::module_Union::utwo');
      let Color = topic.typeSupport.getClass('basic::module_Union::Color');
      let oo = Color.get('Red');

      let jsData = {
        long1: 9,
        union2: new UTwo({s: 888}, oo),
      };

      return jsData;
    }

    it('Union.idl case multi labels read/write',
      function(done) {

        const idlName = 'test_data' + path.sep + 'Union.idl';
        const idl = path.resolve(idlName);

        ddstopic.importIDL(idl).then((result) => {

          expect(result.size).to.be.equal(7);

          let typeSupport;
          let topic;
          let sampleJSObj;

          // switch Color, > 1 label per case
          typeSupport = result.get('basic::module_Union::Union_struct2');
          expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
          topic = dp.createTopic('US2', typeSupport);
          expect(topic).to.not.be.null;
          sampleJSObj = get_Union_struct2(topic);
          readWriteSampleTest(topic, sampleJSObj);

          done();
        }).catch((result) => {
          done(new Error('Union test failed'));
        });

      });

    it('Union.idl case multi labels get wrong case name',
      function(done) {

        const idlName = 'test_data' + path.sep + 'Union.idl';
        const idl = path.resolve(idlName);

        ddstopic.importIDL(idl).then((result) => {

          expect(result.size).to.be.equal(7);

          let typeSupport;
          let topic;

          // switch Color, > 1 label per case
          typeSupport = result.get('basic::module_Union::Union_struct2');
          expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
          topic = dp.createTopic('US22', typeSupport);
          expect(topic).to.not.be.null;

          let UTwo = topic.typeSupport.getClass('basic::module_Union::utwo');
          let Color = topic.typeSupport.getClass('basic::module_Union::Color');
          let oo = Color.get('Red');

          let unionTwo = new UTwo({s: 222}, oo);
          unionTwo.s;

          // Try to call get on a discriminator that is not set
          expect(() => unionTwo.l).to.throw(ReferenceError);
          done();

        }).catch((result) => {
          done(new Error('Union test failed'));
        });

      });

    it('Union.idl case default, Enum switchtype',
      function(done) {

        const idlName = 'test_data' + path.sep + 'Union.idl';
        const idl = path.resolve(idlName);

        ddstopic.importIDL(idl).then((result) => {

          let typeSupport;
          let topic;

          // switch Color, default
          typeSupport = result.get('basic::module_Union::Union_struct1');
          expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
          topic = dp.createTopic('US1', typeSupport);
          expect(topic).to.not.be.null;

          let UOne = topic.typeSupport.getClass('basic::module_Union::uone');
          let Color = topic.typeSupport.getClass('basic::module_Union::Color');
          let oo = Color.get('Blue');

          // test default, explicity setting discriminator
          let sampleJSObj = {
            long1: 9,
            union1: new UOne({ll: 456}, oo),
          };
          readWriteSampleTest(topic, sampleJSObj);

          // test default, using default discriminator value
          sampleJSObj = {
            long1: 9,
            union1: new UOne({ll: 789}),
          };
          readWriteSampleTest(topic, sampleJSObj);

          done();

        }).catch((result) => {
          done(new Error('Union test failed'));
        });

      });

    it('Union.idl case default, long switchtype',
      function(done) {

        const idlName = 'test_data' + path.sep + 'Union.idl';
        const idl = path.resolve(idlName);

        ddstopic.importIDL(idl).then((result) => {

          let typeSupport;
          let topic;

          // switch long, default
          typeSupport = result.get('basic::module_Union::Union_struct0');
          expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
          topic = dp.createTopic('US0', typeSupport);
          expect(topic).to.not.be.null;

          let UZero = topic.typeSupport.getClass('basic::module_Union::uzero');

          // test default, explicity setting discriminator
          let sampleJSObj = {
            long1: 9,
            union0: new UZero({s3: 4}, 7),
          };
          readWriteSampleTest(topic, sampleJSObj);

          done();

        }).catch((result) => {
          done(new Error('Union test failed'));
        });

      });

    it('Union.idl case default, long switchtype, _d undefined',
      function(done) {

        const idlName = 'test_data' + path.sep + 'Union.idl';
        const idl = path.resolve(idlName);

        ddstopic.importIDL(idl).then((result) => {

          let typeSupport;
          let topic;

          // switch long, default
          typeSupport = result.get('basic::module_Union::Union_struct0');
          expect(typeSupport instanceof ddstopic.TypeSupport).to.be.true;
          topic = dp.createTopic('US0', typeSupport);
          expect(topic).to.not.be.null;

          let UZero = topic.typeSupport.getClass('basic::module_Union::uzero');
          expect(() => new UZero({s3: 5})).to.throw(TypeError);

          done();

        }).catch((result) => {
          done(new Error('Union test failed'));
        });

      });


  });


