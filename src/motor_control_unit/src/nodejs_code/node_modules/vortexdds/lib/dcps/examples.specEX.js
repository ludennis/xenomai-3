/*
 *                         Vortex OpenSplice
 *
 *   This software and documentation are Copyright 2006 to 2019 ADLINK
 *   Technology Limited, its affiliated companies and licensors. All rights
 *   reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */

'use strict';
/* eslint-env node, mocha */

const child_process = require('child_process');
const spawn = child_process.spawn;

function runExample(examplePath){

  const promise = new Promise(function(resolve, reject) {

    const childProcess = spawn('node', [ examplePath ]);

    var result = '';
    childProcess.stdout.on('data', function(data) {
      result += data.toString();
    });

    childProcess.stderr.on('data', function(data) {
      result += data.toString();
    });

    childProcess.on('close', function(code) {
      if (code !== 0){
        reject(new Error(result));
      }

      resolve(result);
    });

  });

  return promise;
};

function runMultiExample(file1, file2){

  const promise = new Promise(function(resolve, reject) {

    const childProcess = spawn('node', [ file1 ]);
    const childProcess2 = spawn('node', [ file2 ]);

    var result = '';
    childProcess.stdout.on('data', function(data) {
      result += data.toString();
    });

    childProcess.stderr.on('data', function(data) {
      result += data.toString();
    });

    childProcess.on('close', function(code) {
      if (code !== 0){
        reject(new Error(result));
      }

      resolve(result);
    });

    childProcess2.on('close', function(code) {
      if (code !== 0){
        reject(new Error(result));
      }
    });

  });

  return promise;
};

function npmInstall(examplePath){

  const promise = new Promise(function(resolve, reject) {

    let currentDirectory = process.cwd();
    let fullExamplePath = currentDirectory + examplePath;

    const childProcess = spawn('npm', ['install'], {
      cwd: fullExamplePath});

    var result = '';
    childProcess.stdout.on('data', function(data) {
      result += data.toString();
    });

    childProcess.stderr.on('data', function(data) {
      result += data.toString();
    });

    childProcess.on('close', function(code) {
      if (code !== 0){
        reject(new Error(result));
      }

      resolve(result);
    });

  });

  return promise;
};

describe('Run examples', function() {

  before(function() {
    this.timeout(10000);
    child_process.execSync('cp bld/**/vortexdds-6.10.0.tgz .');
  });

  after(function() {
    this.timeout(20000);
    child_process.execSync('rm vortexdds-6.10.0.tgz');
    child_process.execSync('rm -r examples/**/node_modules');
  });

  it('Listener Example', async function() {

    this.timeout(200000);

    await npmInstall('/examples/ListenerExample');

    let x = await runExample('examples/ListenerExample/ListenerDataPubSub.js');
    console.log('result: ' + x);

    let y = await runMultiExample(
      'examples/ListenerExample/ListenerDataSubscriber.js',
      'examples/ListenerExample/ListenerDataPublisher.js'
    );
    console.log('result: ' + y);

  });

  it('PingPong Example', async function() {

    this.timeout(200000);

    await npmInstall('/examples/PingPong');

    let x = await runMultiExample(
      'examples/PingPong/ping.js',
      'examples/PingPong/pong.js'
    );
    console.log('result: ' + x);

  });

  it('HelloWorld Example', async function() {

    this.timeout(100000);

    await npmInstall('/examples/HelloWorld');

    let x = await runMultiExample(
      'examples/HelloWorld/HelloWorldSubscriber.js',
      'examples/HelloWorld/HelloWorldPublisher.js'
    );
    console.log('result: ' + x);

  });

  it('GetSetQoSExample', async function() {

    this.timeout(100000);

    await npmInstall('/examples/GetSetQoSExample');

    let x = await runExample('examples/GetSetQoSExample/GetSetQoSExample.js');
    console.log('result: ' + x);

  });

  it('IoTData example', async function() {

    this.timeout(100000);

    await npmInstall('/examples/IoTData');

    // run example javascript file(s)
    let x = await runExample('examples/IoTData/IoTDataExample.js');
    console.log('result: ' + x);

  });

  it('TypesExample', async function() {

    this.timeout(100000);

    await npmInstall('/examples/TypesExample');

    // run example javascript file(s)
    let x = await runExample('examples/TypesExample/TypesExample.js');
    console.log('result: ' + x);

  });

});
