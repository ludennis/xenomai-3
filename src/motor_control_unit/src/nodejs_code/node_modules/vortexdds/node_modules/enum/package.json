{
  "_args": [
    [
      "enum@https://registry.npmjs.org/enum/-/enum-2.5.0.tgz",
      "/home/d400/dds-motor-controller/src/motor_control_unit/src/nodejs_code/node_modules/vortexdds"
    ]
  ],
  "_from": "enum@https://registry.npmjs.org/enum/-/enum-2.5.0.tgz",
  "_id": "enum@2.5.0",
  "_inCache": true,
  "_location": "/vortexdds/enum",
  "_phantomChildren": {},
  "_requested": {
    "name": "enum",
    "raw": "enum@https://registry.npmjs.org/enum/-/enum-2.5.0.tgz",
    "rawSpec": "https://registry.npmjs.org/enum/-/enum-2.5.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/enum/-/enum-2.5.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/vortexdds"
  ],
  "_resolved": "https://registry.npmjs.org/enum/-/enum-2.5.0.tgz",
  "_shasum": "f205b8c65a335a8ace8081105df971b18568b984",
  "_shrinkwrap": null,
  "_spec": "enum@https://registry.npmjs.org/enum/-/enum-2.5.0.tgz",
  "_where": "/home/d400/dds-motor-controller/src/motor_control_unit/src/nodejs_code/node_modules/vortexdds",
  "author": {
    "name": "adrai"
  },
  "bugs": {
    "url": "https://github.com/adrai/enum/issues"
  },
  "dependencies": {
    "is-buffer": "^1.1.0"
  },
  "description": "Enum is a javascript module that introduces the Enum Type. It works for node.js and in the browser.",
  "devDependencies": {
    "expect.js": ">= 0.1.2",
    "gulp": "^3.8.11",
    "gulp-babel": "^4.0.0",
    "gulp-bench": "^1.1.0",
    "gulp-browserify": "^0.5.1",
    "gulp-mocha": "^2.0.0",
    "gulp-rename": "^1.2.0",
    "gulp-rimraf": "^0.1.1",
    "gulp-shell": "^0.4.0",
    "gulp-uglify": "^1.1.0",
    "mocha": ">= 1.0.1",
    "zuul": ">= 1.0.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "homepage": "https://github.com/adrai/enum",
  "keywords": [
    "enum"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/adrai/enum/master/licence"
    }
  ],
  "main": "index.js",
  "name": "enum",
  "optionalDependencies": {},
  "private": false,
  "readme": "# Introduction\n\n[![travis](https://img.shields.io/travis/adrai/enum.svg)](https://travis-ci.org/adrai/enum) [![npm](https://img.shields.io/npm/v/enum.svg)](https://npmjs.org/package/enum) [![Sauce Test Status](https://saucelabs.com/buildstatus/adrirai)](https://saucelabs.com/u/adrirai)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/adrirai.svg)](https://saucelabs.com/u/adrirai)\n\n<!---\n[![browser support](https://ci.testling.com/adrai/enum.png)](https://ci.testling.com/adrai/enum)\n-->\n\n\nEnum is a javascript module that introduces the Enum Type. It works for node.js and in the browser.\n\n...and [ref](https://github.com/TooTallNate/ref) compatible [Known Types](https://github.com/TooTallNate/ref/wiki/Known-%22types%22)\n\n# Download\nReleases for a browser are available for download from GitHub.\n\n| **Version** | **Description** | **Size** |\n|:------------|:----------------|:---------|\n| `enum-2.4.0.js` | *uncompressed, with comments* | [Download](https://raw.github.com/adrai/enum/master/enum-2.4.0.js) |\n| `enum-2.4.0.min.js` | *compressed, without comments* | [Download](https://raw.github.com/adrai/enum/master/enum-2.4.0.min.js) |\n\n# Installation (node.js)\n\n    $ npm install enum\n\n# Installation (browser)\n\n    <script src=\"enum.js\"></script>\n\n# Usage\n\n````js\n// use it as module\nvar Enum = require('enum');\n\n// or extend node.js with this new type\nrequire('enum').register();\n\n// define a simple enum (automatically flaggable -> A: 0x01, B: 0x02, C: 0x04)\n//Uses bitwise 'OR' operation in between the values and creates enumerated constants. For example, if 'Read':1, 'Write':2, then ReadWrite= Read | Write = 1 | 2 = 3;\nvar myEnum = new Enum(['A', 'B', 'C']);\n\n//define a flagged enum object to create a multicolor option; just pass an array\nvar myEnum = new Enum(['Black', 'Red', 'Green', 'Blue']);\nmyEnum; //=> Enum {_options: Object, enums: Array[4], Black: EnumItem, Red: EnumItem, Green: EnumItem….....}\nmyEnum.isFlaggable; //=> true\n\nfor(var i=1; i<8; i++){ console.log(myEnum.get(i).value + '=> '+ myEnum.get(i).key)}\n    1=> Black\n    2=> Red\n    3=> Black | Red\n    4=> Green\n    5=> Black | Green\n    6=> Red | Green\n    7=> Black | Red | Green\n\n// define an enum with own values\nvar myEnum = new Enum({'A': 1, 'B': 2, 'C': 4});\n\n// if defining a flaggable enum, you can define your own separator (default is ' | ')\nvar myEnum = new Enum(['A', 'B', 'C'], { separator: ' | ' });\n\n// if you want your enum to have a name define it in the options\nvar myEnum = new Enum(['A', 'B', 'C'], { name: 'MyEnum' });\n\n// or\nvar myEnum = new Enum(['A', 'B', 'C'], 'MyEnum');\n\n// if you want your enum to have an explicit \"endianness\", define it in the options\n// (defaults to `os.endianness()`)\nvar myEnum = new Enum(['A', 'B', 'C'], { endianness: 'BE' });\n\n// if you want your enum to be not case sensitive\n// (defaults to `false`)\nvar myEnum = new Enum(['One', 'tWo', 'ThrEE'], { ignoreCase: true });\nmyEnum.get('one'); // => myEnum.One\nmyEnum.get('TWO'); // => myEnum.tWo\nmyEnum.ThrEE.is('three'); // => true\n\n// this option will make instances of Enum non-extensible\n// (defaults to `false`)\nvar myEnum = new Enum(['ONE', 'TWO', 'THREE'], { freez: true });\n\n//define enum type without flag\nvar myEnum = new Enum({'None': 0, 'Black':1, 'Red': 2, 'Red2': 3, 'Green': 4, 'Blue': 5});\nmyEnum; //=>  Enum {_options: Object, enums: Array[6], None: EnumItem, Black: EnumItem, Red: EnumItem…........}\nmyEnum.isFlaggable; //=> false\n\nmyEnum.toJSON(); // returns {'None': 0, 'Black':1, 'Red': 2, 'Red2': 3, 'Green': 4, 'Blue': 5}\nJSON.stringify(myEnum); // returns '{\"None\":0,\"Black\":1,\"Red\":2,\"Red2\":3,\"Green\":4,\"Blue\":5}'\n\nfor(var i=0; i<=5; i++){ console.log(myEnum.get(i).value + '=> '+ myEnum.get(i).key)}\n    0=> None\n    1=> Black\n    2=> Red\n    3=> Red2\n    4=> Green\n    5=> Blue\n\n// iterating over an enum\nmyEnum.enums.forEach(function(enumItem) {\n  console.log(enumItem.key);\n});\n// => None\n// => Black\n// => Red\n// => Red2\n// => Green\n// => Blue\n\n// get your item\nmyEnum.A\n\n// or\nmyEnum.get('A')\n\n// or\nmyEnum.get(1)\n\n// or\nmyEnum.get('A | B')\n\n// or\nmyEnum.get(3)\n\n\n// get your value\nmyEnum.A.value\n\n// get your key\nmyEnum.A.key\n\n\n// get all items\nmyEnum.enums // returns all enums in an array\n\n// check if it's defined\nmyEnum.isDefined(myEnum.A) // returns true\nmyEnum.isDefined('A')      // returns true\nmyEnum.isDefined(1)        // returns true\n\n// compare\nmyEnum.A.is(myEnum.A)\n\n// or\nmyEnum.A.is('A')\n\n// or\nmyEnum.A.is(1)\n\n// or\nmyEnum.A == myEnum.A\n\n// or\nmyEnum.A === myEnum.A\n\n\n// check flag\nvar myItem = myEnum.get(3); // or [myEnum.get('A | B')]\nmyItem.has(myEnum.A)\n\n// or\nmyItem.has('A')\n\n// or\nmyItem.has(1)\n\n\n// other functions\nmyItem.toString() // returns 'A | C'\nmyItem.toJSON() // returns '\"A | C\"'\nmyItem.valueOf() // returns 3\n\nJSON.stringify(myItem) // returns '\"A | C\"'\n\n//Type Safety:\n//Newly created enumerable objects are Type-Safe in a way that it's non-configurable and no longer extensible.\n//Each EnumItem has a beack-reference to a constructor and they are implicitly final.\nObject.getOwnPropertyDescriptor(myEnum, 'Red'); //=> Object {value: EnumItem, writable: false, enumerable: true, configurable: false}\nObject.isExtensible(myEnum); //=> false\nmyEnum instanceof Enum; //=> true\n\n//Instances of Enum created with 'new' from similar objects are not equal\nmyEnum1=new Enum({'A':1, 'B':2, 'C':4});\nmyEnum2=new Enum({'A':1, 'B':2, 'C':4});\nmyEnum1 == myEnum2 //=> false\nmyEnum1.A == myEnum2.A //=> false\nmyEnum1.A.value == myEnum2.A.value //=> true\n\n//This enum object has no properties other than those defined during its creation. Existing Data is 'Persistent' and preserves the original version\nmyEnum.B.value; //=> 2\nmyEnum.B = 5; //=> Throws TypeError\ndelete myEnum.B; //=> false\nmyEnum.D = 6; //=> doesn't add to the enum object, silently ignores\nmyEnum.D; // undefined\n\n//Try to define new property throws TypeError\nObject.defineProperty(myEnum, D, {value:6, writable:false, enumerable:true});\n//=>TypeError: Cannot define property:D, object is not extensible.\n````\n\n\n# License\n\nCopyright (c) 2016 Adriano Raiano, Christoph Hermann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/adrai/enum.git"
  },
  "scripts": {
    "build": "gulp build",
    "prepublish": "gulp",
    "test": "gulp test-ci"
  },
  "testling": {
    "browsers": [
      "android-browser/4.2..latest",
      "chrome/22..latest",
      "chrome/canary",
      "firefox/17..latest",
      "firefox/nightly",
      "ie/6..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest"
    ],
    "files": "test/*.js",
    "harness": "mocha"
  },
  "version": "2.5.0"
}
